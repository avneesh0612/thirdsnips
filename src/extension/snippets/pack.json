{
  "Get Pack Balance": {
    "prefix": "packBalanceOf",
    "body": [
      "// Address of the wallet to check pack balance",
      "const address = \"{{wallet_address}}\";",
      "// The token ID of the pack you want to check the wallets balance of",
      "const tokenId = \"0\"",
      "",
      "const balance = await contract.balanceOf(address, tokenId);",
      "console.log(balance);"
    ],
    "description": "Get Pack Balance"
  },
  "Create Pack": {
    "prefix": "packCreate",
    "body": [
      "// Data to create the pack",
      "const pack = {",
      "  // The address of the contract that holds the rewards you want to include",
      "  assetContract: \"0x...\",",
      "  // The metadata of the pack",
      "  metadata: {",
      "    name: \"Cool Pack\",",
      "    description: \"This is a cool pack\",",
      "    // This can be an image url or image file",
      "    image: readFileSync(\"path/to/image.png\"),",
      "  },",
      "  // The NFTs you want to include in the pack",
      "  assets: [",
      "    {",
      "      tokenId: 0, // The token ID of the asset you want to add",
      "      amount: 1, // The amount of the asset you want to add",
      "    }, {",
      "      tokenId: 1,",
      "      amount: 1,",
      "    }",
      "  ],",
      "};",
      "",
      "await contract.create(pack);"
    ],
    "description": "Create Pack"
  },
  "Get Pack Data": {
    "prefix": "packGetAll",
    "body": ["const packs = await contract.getAll();", "console.log(packs);"],
    "description": "Get Pack Data"
  },
  "Get Pack Reward Data": {
    "prefix": "packGetNFTs",
    "body": [
      "// The pack ID of the pack whos rewards you want to get",
      "const packId = 0;",
      "",
      "const nfts = await contract.getNFTs(packId);",
      "console.log(nfts);"
    ],
    "description": "Get Pack Reward Data"
  },
  "Open Pack": {
    "prefix": "packOpen",
    "body": [
      "// The pack ID of the asset you want to buy",
      "const packId = \"0\";",
      "const tx = await contract.open(packId);",
      "const receipt = tx.receipt; // the transaction receipt",
      "const packId = tx.id; // the id of the pack that was opened",
      "const rewards = tx.data(); // the contents of the opened pack"
    ],
    "description": "Open Pack"
  },
  "Transfer Pack": {
    "prefix": "packTransfer",
    "body": [
      "// Address of the wallet you want to send the pack to",
      "const toAddress = \"0x...\";",
      "",
      "// The token ID of the pack you want to send",
      "const tokenId = \"0\";",
      "",
      "// The number of packs you want to send",
      "const amount = 1;",
      "",
      "await contract.transfer(toAddress, tokenId, amount);"
    ],
    "description": "Transfer Pack"
  }
}
