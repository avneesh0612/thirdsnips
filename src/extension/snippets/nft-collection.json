{
  "Mint an NFT to your wallet": {
    "prefix": "mintNft",
    "body": [
      "const nftCollection = sdk.getNFTModule(\"${1:<MODULE_ADDRESS>}\");",
      "",
      "const mintNft = async () => {",
      "  try {",
      "    await nftCollection.mint({",
      "      name: \"${2:thirdweb}\",",
      "      description: \"${3:Smart contracts you control. Tools that accelerate your workflow. Intuitive SDKs and widgets for developers.}\",",
      "      image: \"${4:ipfs/<YOUR_IPFS_FOLDER_CID>/1.png}\",",
      "      properties: {},",
      "    });",
      "  } catch (err) {",
      "    console.log(err);",
      "  }",
      "};",
      "",
      "mintNft();"
    ],
    "description": "Mint an NFT to your wallet"
  },
  "Mint an NFT to someone's wallet": {
    "prefix": "mintNftTo",
    "body": [
      "const nftCollection = sdk.getNFTModule(\"${1:<MODULE_ADDRESS>}\");",
      "",
      "const mintNftTo = async (address: string) => {",
      "  try {",
      "    await nftCollection.mintTo(address, {",
      "      name: \"${2:thirdweb}\",",
      "      description: \"${3:Smart contracts you control. Tools that accelerate your workflow. Intuitive SDKs and widgets for developers.}\",",
      "      image: \"${4:ipfs/<YOUR_IPFS_FOLDER_CID>/1.png}\",",
      "      properties: {},",
      "    });",
      "  } catch (err) {",
      "    console.log(err);",
      "  }",
      "};",
      "",
      "mintNftTo(\"${5:<TARGET_ADDRESS>}\");"
    ],
    "description": "Mint an NFT to someone's wallet"
  },
  "Get balance of NFTs of a collection": {
    "prefix": "nftBalance",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const balance = async () => {",
      "  await nftCollection",
      "    .balance()",
      "    .then((data) => console.log(data.toNumber()))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get balance of NFTs of a collection"
  },
  "Get NFT balance of another account": {
    "prefix": "nftBalanceOf",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const balance = async () => {",
      "    let address = \"${2:<TARGET_ADDRESS>}\";",
      "",
      "  await nftCollection",
      "    .balanceOf(address)",
      "    .then((data) => console.log(data.toNumber()))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get NFT balance of another account"
  },
  "Burn an NFT with Token ID": {
    "prefix": "burnNft",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const burnToken = async (tokenId) => {",
      "  await nftCollection",
      "    .burn(tokenId)",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Burn an NFT with Token ID"
  },
  "Generate NFT signature for a Mint request": {
    "prefix": "genNftSign",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const generateNftSignature = async () => {",
      "  await nftCollection",
      "    .generateSignature({",
      "      ",
      "    ",
      "      currencyAddress: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", // Native currencies.",
      "      ",
      "      metadata: {",
      "        id: \"0\",",
      "      },",
      "      mintEndTimeEpochSeconds: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7,",
      "      mintStartTimeEpochSeconds: Math.floor(Date.now() / 1000),",
      "      price: 0,",
      "     ",
      "           ",
      "      to: \"${2:<TARGET_ADDRESS>}\",",
      "    })",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Generate NFT signature for a Mint request"
  },
  "Get a NFT by it's ID": {
    "prefix": "getNftbyId",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getNftById = async (tokenId) => {",
      "  await nftCollection",
      "    .get(tokenId)",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get a NFT by it's ID"
  },
  "Get all NFTs of a collection": {
    "prefix": "getAllNft",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getAllNfts = async () => {",
      "  await nftCollection",
      "    .getAll()",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get all NFTs of a collection"
  },
  "Get all NFTs of a collection owned by the owner": {
    "prefix": "getNftsWithOwner",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getAllNftsWithOwner = async () => {",
      "  await nftCollection",
      "    .getAllWithOwner()",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get all NFTs of a collection owned by the owner"
  },
  "Get all NFTs of a collection owned by a specific address": {
    "prefix": "getNftsWithAddress",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getAllNftsOwnedByAddress = async (address) => {",
      "  await nftCollection",
      "    .getOwned(address)",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get all NFTs of a collection owned by a specific address"
  },
  "Mint multiple NFTs in a single batch": {
    "prefix": "mintNftBatch",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const mintNFTBatch = async () => {",
      "  await nftCollection",
      "    .mintBatch([",
      "      {",
      "        name: \"${2:thirdweb}\",",
      "        description: \"${3:NFT Minted with thirdweb!}\",",
      "        image: \"${4:ipfs/<YOUR_IPFS_FOLDER_CID>/1.png}\",",
      "        properties: {},",
      "      },",
      "      {",
      "        name: \"${5:thirdweb #2}\",",
      "        description: \"${6:NFT Minted with thirdweb!}\",",
      "        image: \"${7:ipfs/<YOUR_IPFS_FOLDER_CID>/2.png}\",",
      "        properties: {},",
      "      },",
      "    ])",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Mint multiple NFTs in a single batch"
  },
  "Mint multiple NFTs in a single batch to a specific address": {
    "prefix": "mintNftBatchTo",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const mintNFT = async () => {",
      "  let address = \"${2:<TARGET_ADDRESS>}\";",
      "",
      "  await nftCollection",
      "    .mintTo(address, {",
      "      name: \"${3:thirdweb}\",",
      "      description: \"${4:NFT Minted with thirdweb!}\",",
      "      image: \"${5:ipfs/<YOUR_IPFS_FOLDER_CID>/1.png}\",",
      "      properties: {},",
      "    })",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Mint multiple NFTs in a single batch to a specific address"
  },
  "Get the owner of a NFT": {
    "prefix": "getNftOwner",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getNftOwner = async (tokenId) => {",
      "  await nftCollection",
      "    .ownerOf(tokenId)",
      "    .then((data) => console.log(data))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get the owner of a NFT"
  },
  "Get the total supply of a NFT collection": {
    "prefix": "getNftTotalSupply",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const getTotalSupply = async () => {",
      "  await nftCollection",
      "    .totalSupply()",
      "    .then((data) => console.log(data.toNumber()))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Get the total supply of a NFT collection"
  },
  "Transfer an NFT to a specific address": {
    "prefix": "transferNft",
    "body": [
      "",
      "const nftCollectionAddress = \"${1:<MODULE_ADDRESS>}\";",
      "",
      "",
      "const nftCollection = sdk.getNFTModule(nftCollectionAddress);",
      "",
      "const transferTokenToAddress = async (tokenId, address) => {",
      "  await nftCollection",
      "    .transfer(address, tokenId)",
      "    .then((data) => console.log(data.toNumber()))",
      "    .catch((err) => console.log(err));",
      "};"
    ],
    "description": "Transfer an NFT to a specific address"
  }
}
