{
  "Get the balance of a token": {
    "prefix": "tokenBalance",
    "body": [
      "const balance = async () => {",
      "  try {",
      "    await token.balance();",
      "  } catch (error) {",
      "    console.log('Failed to check balance. Error: ', error);",
      "  }",
      "};",
      "",
      "balance();"
    ],
    "description": "Get the balance of a token"
  },
  "Get the balance of a token for a specific address": {
    "prefix": "tokenBalanceOf",
    "body": [
      "const balanceOf = async (address) => {",
      "  try {",
      "    await token.balanceOf(address);",
      "  } catch (error) {",
      "    console.log('Failed to check balance of. Error: ', error);",
      "  }",
      "};",
      "",
      "balanceOf(\"${1:<SPENDER_ADDRESS>}\");"
    ],
    "description": "Get the balance of a token for a specific address"
  },
  "Burn tokens owned by the owner": {
    "prefix": "tokenBurn",
    "body": [
      "const burn = async (amount) => {",
      "  try {",
      "    await token.burn(ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to burn. Error: ', error);",
      "  } ",
      "};",
      "",
      "burn('${1:<AMOUNT_TO_BURN>}');"
    ],
    "description": "Burn tokens owned by the owner"
  },
  "Burn tokens owned by a specific address": {
    "prefix": "tokenBurnFrom",
    "body": [
      "const burnFrom = async (from, amount) => {",
      "  try {",
      "    await token.burnFrom(from, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to burn from. Error: ', error);",
      "  }",
      "};",
      "",
      "burnFrom(\"${1:<SPENDER_ADDRESS>}\", \"${2:<AMOUNT_TO_BURN>}\");"
    ],
    "description": "Burn tokens owned by a specific address"
  },
  "Get details about a token module": {
    "prefix": "tokenGet",
    "body": [
      "const get = async () => {",
      "  try {",
      "    await token.get();",
      "  } catch (error) {",
      "    console.log('Failed to get. Error: ', error);",
      "  }",
      "};",
      "",
      "get();"
    ],
    "description": "Get details about a token module"
  },
  "Get all the balances of all holders": {
    "prefix": "tokenGetAllHolderBalances",
    "body": [
      "const getAllHolderBalances = async () => {",
      "  try {",
      "    await token.getAllHolderBalances();  ",
      "  } catch (error) {",
      "    console.log('Failed to get all holder balances. Error: ', error);",
      "  }",
      "};",
      "  ",
      "getAllHolderBalances();"
    ],
    "description": "Get all the balances of all holders"
  },
  "Get the delegation of a token": {
    "prefix": "tokenGetDelegation",
    "body": [
      "const getDelegation = async () => {  ",
      "  try {",
      "    await token.getDelegation();",
      "  } catch (error) {",
      "    console.log('Failed to get delegation. Error: ', error);",
      "  }",
      "};",
      "",
      "getDelegation();"
    ],
    "description": "Get the delegation of a token"
  },
  "Get the delegation of a token for a specific address": {
    "prefix": "tokenGetDelegationOf",
    "body": [
      "const getDelegationOf = async (account) => {  ",
      "  try {",
      "    await token.getDelegationOf(account);",
      "  } catch (error) {",
      "    console.log('Failed to get delegation of. Error: ', error);",
      "  }",
      "  };",
      "  ",
      "getDelegationOf(\"${1:<SPENDER_ADDRESS>}\");"
    ],
    "description": "Get the delegation of a token for a specific address"
  },
  "Get the value for the specified amount of a token": {
    "prefix": "tokenGetValue",
    "body": [
      "const getValue = async (value) => {",
      "  try {",
      "    await token.getValue(ethers.utils.parseEther(value));",
      "  } catch (error) {",
      "    console.log('Failed to get value. Error: ', error);",
      "  }",
      "};",
      "",
      "getValue('${1:<VALUE>}');"
    ],
    "description": "Get the value for the specified amount of a token"
  },
  "Get information of the vote balance for yourself": {
    "prefix": "getVoteBalance",
    "body": [
      "const getVoteBalance = async () => {",
      "  try {",
      "    await token.getVoteBalance();",
      "  } catch (error) {",
      "    console.log('Failed to get vote balance. Error: ', error);",
      "  }",
      "};",
      "",
      "getVoteBalance();"
    ],
    "description": "Get information of the vote balance for yourself"
  },
  "Get information about the vote balance for the specified address": {
    "prefix": "getVoteBalanceOf",
    "body": [
      "const getVoteBalanceOf = async (account) => {  ",
      "  try {",
      "    await token.getVoteBalanceOf(account);",
      "  } catch (error) {",
      "    console.log('Failed to get vote balance of. Error: ', error);",
      "  }",
      "};",
      "",
      "getVoteBalanceOf(\"${1:<SPENDER_ADDRESS>}\");"
    ],
    "description": "Get information about the vote balance for the specified address"
  },
  "Mint specific amount of tokens": {
    "prefix": "tokenMint",
    "body": [
      "const mint = async (amount) => { ",
      "  try { ",
      "    await token.mint(ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to mint. Error: ', error);",
      "  }",
      "};",
      "",
      "mint('${1:<AMOUNT_TO_MINT>}');"
    ],
    "description": "Mint specific amount of tokens"
  },
  "Mint specific amount of tokens to multiple addresses in a batch": {
    "prefix": "tokenMintBatchTo",
    "body": [
      "const mintBatchTo = async (batchTo) => { ",
      "  try { ",
      "    await token.mintBatchTo(batchTo);",
      "  } catch (error) {",
      "    console.log('Failed to mint batch to. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "    address: \"${1:<SPENDER_ADDRESS>}\",",
      "    amount: ethers.utils.parseEther(\"${2:1}\")",
      "  },",
      "  {",
      "    address: \"${3:<SPENDER_ADDRESS_2>}\",",
      "    amount: ethers.utils.parseEther(\"${4:5}\")",
      "  }",
      "]",
      "",
      "mintBatchTo(example);"
    ],
    "description": "Mint specific amount of tokens to multiple addresses in a batch"
  },
  "Mint specific amount of tokens to a specific address": {
    "prefix": "tokenMintTo",
    "body": [
      "const mintTo = async (to, amount) => {  ",
      "  try { ",
      "    await token.mintTo(to, amount);",
      "  } catch (error) {",
      "    console.log('Failed to mint to. Error: ', error);",
      "  }",
      "};",
      "",
      "mintTo(\"${1:<SPENDER_ADDRESS>}\", ethers.utils.parseEther(\"${2:1}\"));"
    ],
    "description": "Mint specific amount of tokens to a specific address"
  },
  "Get the total supply of a token module": {
    "prefix": "tokenTotalSupply",
    "body": [
      "const totalSupply = async () => {  ",
      "  try {",
      "    await token.totalSupply();",
      "  } catch (error) {",
      "    console.log('Failed to get total supply. Error: ', error);",
      "  }",
      "};",
      "",
      "totalSupply();"
    ],
    "description": "Get the total supply of a token module"
  },
  "Transfer specific amount of tokens to a specific address": {
    "prefix": "tokenTransfer",
    "body": [
      "const transfer = async (to, amount) => {  ",
      "  try {",
      "    await token.transfer(to, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to transfer. Error: ', error);",
      "  }",
      "};",
      " ",
      "transfer(\"${1:<SPENDER_ADDRESS>}\", \"${2:<AMOUNT_TO_TRANSFER>}\");"
    ],
    "description": "Transfer specific amount of tokens to a specific address"
  },
  "Transfer specific amounts of tokens to multiple addresses in a batch": {
    "prefix": "tokenTransferBatch",
    "body": [
      "const transferBatch = async (batch) => {  ",
      "  try {",
      "    await token.transferBatch(batch);",
      "  } catch (error) {",
      "    console.log('Failed to transfer batch. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "      address: \"${1:<SPENDER_ADDRESS>}\",",
      "      amount: ethers.utils.parseEther(\"${2:2}\")",
      "  },",
      "  {",
      "      address: \"${3:<SPENDER_ADDRESS_2>}\",",
      "      amount: ethers.utils.parseEt(\"${4:1}\")",
      "  }",
      "]",
      " ",
      "transferBatch(example);"
    ],
    "description": "Transfer specific amounts of tokens to multiple addresses in a batch"
  },
  "Transfer specific amount of tokens from an address to another address": {
    "prefix": "tokenTransferFrom",
    "body": [
      "const transferFrom = async (from, to, amount) => { ",
      "  try { ",
      "    await token.transferFrom(from, to, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to transfer from. Error: ', error);",
      "  }",
      "};",
      "",
      "transferFrom(\"${1:<SPENDER_ADDRESS>}\", \"${2:<SPENDER_ADDRESS_2>}\", \"${3:<AMOUNT_TO_TRANSFER>}\");"
    ],
    "description": "Transfer specific amount of tokens from an address to another address"
  },
  "Transfer specific amounts of tokens from multiple addresses to another addresses in a batch": {
    "prefix": "tokenTransferFromBatch",
    "body": [
      "const transferFromBatch = async (batch) => {  ",
      "  try {",
      "    await token.transferFromBatch(batch);",
      "  } catch (error) {",
      "    console.log('Failed to trasnfer from batch. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "      address: \"${1:<TO_ADDRESS>}\",",
      "      amount: ethers.utils.parseEther(\"${2:1}\"),",
      "      fromAddress: \"${3:<FROM_ADDRESS>}\"",
      "  },",
      "  {",
      "      address: \"${4:<TO_ADDRESS>}\",",
      "      amount: ethers.utils.parseEther(\"${5:1}\"),",
      "      fromAddress: \"${6:<FROM_ADDRESS>}\"",
      "  }",
      "]",
      "",
      "transferFromBatch(example);"
    ],
    "description": "Transfer specific amounts of tokens from multiple addresses to another addresses in a batch"
  }
}
